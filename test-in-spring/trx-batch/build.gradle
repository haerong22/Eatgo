plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.jooq.jooq-codegen-gradle" version "3.19.8"
}

ext {
    jooqVersion = "3.19.8"
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.httpcomponents.client5:httpclient5'

    // jooq
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation "org.jooq:jooq:${jooqVersion}"
    jooqCodegen 'com.mysql:mysql-connector-j'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.apache.commons:commons-lang3:3.14.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

jooq {
    configuration {
        if (System.getProperty('spring.profiles.active') == 'dbtest') {
            jdbc {
                driver = "com.mysql.cj.jdbc.Driver"
                url = 'jdbc:mysql://localhost:3306/' + tasks.testDbSetup.output()
                user = System.getenv('TEST_TRX_BATCH_DB_USER')
                password = System.getenv('TEST_TRX_BATCH_DB_PASS')
            }
        } else {
            jdbc {
                driver = "com.mysql.cj.jdbc.Driver"
                url = 'jdbc:mysql://localhost:3306/trxbatch'
                user = System.getenv('TRX_BATCH_DB_USER')
                password = System.getenv('TRX_BATCH_DB_PASS')
            }
        }

        generator {
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                if (System.getProperty('spring.profiles.active') == 'dbtest') {
                    inputSchema = tasks.testDbSetup.output()
                } else {
                    inputSchema = "trxbatch"
                }
                includes = '.*'
                excludes = 'BATCH_.*'
            }

            target {
                packageName = 'org.example.trxbatch.generated'
                directory = "src/main/java"
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    filter {
        includeTestsMatching 'org.example.trxbatch.*'
        excludeTestsMatching '*IntTest'
    }
}

tasks.register('unitTest', Test) {
    println("Custom task `unitTest` is started")

    description = 'Run unit tests'
    group = 'verification'

    useJUnitPlatform()

    filter {
        includeTestsMatching '*UnitTest'
    }
}

tasks.register('springTest', Test) {
    println("Custom task `springTest` is started")

    description = 'Run spring tests'
    group = 'verification'

    useJUnitPlatform()

    filter {
        includeTestsMatching '*SpringTest'
    }
}

tasks.register('testDbSetup', Exec) {
    println("Custom task `testDbSetup` is started")

    description = 'Setup test database'
    group = 'other'

    String randomTestDbSuffix = UUID.randomUUID().toString().replaceAll('-', '_').substring(0, 10)
    String testDbName = 'test_db_' + randomTestDbSuffix

    commandLine './scripts/setup_test_db.sh', System.getenv('TEST_TRX_BATCH_DB_USER'), System.getenv('TEST_TRX_BATCH_DB_PASS'), testDbName

    ext.output = {
        return testDbName
    }

    doLast {
        File propertiesFile = file('src/main/resources/application-dbtest.properties')
        Properties properties = new Properties()
        properties.load(new FileInputStream(propertiesFile))
        properties.setProperty('spring.datasource.url', 'jdbc:mysql://localhost:3306/' + testDbName)
        properties.store(new FileOutputStream(propertiesFile), null)

        println "Updated application-dbtest.properties with test database: $testDbName"
    }

}

tasks.register('dbIntTest', Test) {
    println("Custom task `dbIntTest` is started")

    description = 'Run database integration tests'
    group = 'verification'

    useJUnitPlatform()

    filter {
        includeTestsMatching '*DbIntTest'
    }
}

if (System.getProperty('spring.profiles.active') == 'dbtest') {
    println("Custom dependencies for spring.profiles.active=dbtest: `testDbSetup`, `jooqCodegen` ")

    tasks.compileJava.dependsOn(tasks.testDbSetup, tasks.jooqCodegen)
    tasks.compileTestJava.dependsOn(tasks.testDbSetup, tasks.jooqCodegen)
    tasks.dbIntTest.dependsOn(tasks.testDbSetup, tasks.jooqCodegen)

    tasks.jooqCodegen.dependsOn(tasks.testDbSetup)
}