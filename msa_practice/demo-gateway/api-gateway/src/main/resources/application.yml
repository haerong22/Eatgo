server:
  port: 8001
  compression:
    enabled: true

spring:
  config:
    activate:
      on-profile: mobile

  application:
    name: api-gateway-mobile

  cloud:
    gateway:
      default-filters:
        - name: LoggingFilter
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 1 # 사용자가 일정 시간 동안 발생시킬 수 있는 요청의 수
            redis-rate-limiter.burstCapacity: 1 # 토큰 버킷이 담을 수 있는 최대 토큰의 수
            key-resolver: "#{@ipKeyResolver}"

      routes:
        - id: book-api
          uri: lb://book-api
          order: 1
          predicates:
            - Path=/books/**
          filters:
            - RewritePath=/books/(?<segment>.*), /v1/books/$\{segment}

        - id: payment-api
          uri: lb://payment-api
          order: 1
          predicates:
            - Path=/payments/**
          filters:
            - RewritePath=/payments/(?<segment>.*), /v1/payments/$\{segment}
  data:
    redis:
      port: 16379
      host: localhost

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka
    register-with-eureka: true
    fetch-registry: true

jwt:
  secret: 1ad35d74dc65cc0ee9a3a409f7f87e332aa6aa89d9cc64c66cdf9a1ffdc534ee

management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3
      produce: b3_multi

  zipkin:
    tracing:
      endpoint: "http://localhost:9411/api/v2/spans"

  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - loggers
          - mappings
          - metrics
          - shutdown
          - prometheus

---
server:
  port: 8002

spring:
  config:
    activate:
      on-profile: web

  application:
    name: api-gateway-web

  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]': # 모든 경로
            allowed-origins: # 허용 origin
              - "https://example.com"
            allowed-methods: # 허용 HTTP 메소드
              - GET
              - POST
            allowed-headers: # 허용 헤더
              - Content-Type
              - Authorization
            allow-credentials: true # 인증 허용 여부
            max-age: 3600 # pre-flight 요청의 캐시 시간(초)
      default-filters:
        - name: LoggingFilter
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 1 # 사용자가 일정 시간 동안 발생시킬 수 있는 요청의 수
            redis-rate-limiter.burstCapacity: 1 # 토큰 버킷이 담을 수 있는 최대 토큰의 수
            key-resolver: "#{@ipKeyResolver}"

      routes:
        - id: book-api
          uri: lb://book-api
          order: 1
          predicates:
            - Path=/books/**
          filters:
            - RewritePath=/books/(?<segment>.*), /v1/books/$\{segment}

        - id: payment-api
          uri: lb://payment-api
          order: 1
          predicates:
            - Path=/payments/**
          filters:
            - RewritePath=/payments/(?<segment>.*), /v1/payments/$\{segment}
  data:
    redis:
      port: 16379
      host: localhost

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka
    register-with-eureka: true
    fetch-registry: true

jwt:
  secret: 1ad35d74dc65cc0ee9a3a409f7f87e332aa6aa89d9cc64c66cdf9a1ffdc534ee

management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: b3
      produce: b3_multi

  zipkin:
    tracing:
      endpoint: "http://localhost:9411/api/v2/spans"

  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - loggers
          - mappings
          - metrics
          - shutdown
          - prometheus